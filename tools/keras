#!/bin/bash

set -e

root=$(cd $(dirname ${0})/..; pwd)
build=${root}/build
test=${root}/test
third_party=${root}/third_party
tools=${root}/tools

virtualenv=${third_party}/virtualenv/keras

if [ -f $(which python3) ]; then
    PYTHON=$(which python3)
else
    PYTHON=python
fi

bold() {
    echo "$(tty -s && tput bold)$1$(tty -s && tput sgr0)" 
}

clean() {
    bold "keras clean"
    rm -rf ${virtualenv}
    rm -rf ${third_party}/keras
}

sync() {
    bold "keras sync"
    mkdir -p "${third_party}"
    if [ -d "${third_party}/keras" ]; then
        git -C "${third_party}/keras" pull --quiet --prune
    else
        git -C "${third_party}" clone --quiet --recursive https://github.com/keras-team/keras.git
    fi
    git -C "${third_party}/keras" submodule sync --quiet
    git -C "${third_party}/keras" submodule update --quiet --init --recursive
}

install() {
    bold "keras install"
    [ -n "$(${PYTHON} -m pip list --format columns --disable-pip-version-check | grep -w virtualenv)" ] || ${PYTHON} -m pip install --force-reinstall --user --quiet virtualenv
    [ -d "${virtualenv}" ] || virtualenv --quiet -p ${PYTHON} ${virtualenv}
    source ${virtualenv}/bin/activate
    ${PYTHON} -m pip install --quiet --upgrade tensorflow
    ${PYTHON} -m pip install --quiet ${third_party}/keras
    deactivate
}

metadata() {
    bold "keras metadata"
    source ${virtualenv}/bin/activate
    pushd ${tools} > /dev/null
    ${PYTHON} keras-script.py metadata
    popd > /dev/null
    deactivate
}

zoo() {
    bold "keras zoo"
    source ${virtualenv}/bin/activate
    pushd ${tools} > /dev/null
    ${PYTHON} keras-script.py zoo
    popd > /dev/null
    deactivate
}

while [ "$#" != 0 ]; do
    command="$1" && shift
    case "${command}" in
        "clean") clean;;
        "sync") sync;;
        "install") install;;
        "metadata") metadata;;
        "zoo") zoo;;
    esac
done
