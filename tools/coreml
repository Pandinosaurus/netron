#!/bin/bash

set -e

root=$(cd $(dirname ${0})/..; pwd)

PYTHON=python
if [[ "$(python3 --version 2> /dev/null)" =~ "Python 3" ]]; then
    PYTHON=python3
fi

venv() {
    venv_dir=${root}/third_party/venv/coremltools
    [ -d "${venv_dir}" ] || ${PYTHON} -m venv ${venv_dir}
    case "${venv_dir}" in
        msys*) source ${venv_dir}/Scripts/activate;;
        *) source ${venv_dir}/bin/activate;;
    esac
    ${PYTHON} -m pip install --quiet --upgrade pip
}

bold() {
    echo "$(tty -s && tput bold)$1$(tty -s && tput sgr0)" 
}

clean() {
    bold "coreml clean"
    rm -rf ${root}/third_party/venv/coremltools
    rm -rf ${root}/third_party/coremltools
}

sync() {
    bold "coreml sync"
    pushd ${root} > /dev/null
    mkdir -p "./third_party"
    if [ -d "./third_party/coremltools" ]; then
        git -C "./third_party/coremltools" pull --quiet --prune
    else
        git -C "./third_party" clone --quiet --recursive https://github.com/apple/coremltools.git
    fi
    popd > /dev/null
}

schema() {
    bold "coreml schema"
    pushd ${root} > /dev/null
    [[ $(file "./src/coreml-proto.js") =~ CRLF ]] && crlf=1
    npx pbjs -t static-module -w closure --no-encode --no-delimited --no-comments --no-convert --no-verify --no-create --keep-case -r coreml -o ./src/coreml-proto.js ./third_party/coremltools/mlmodel/format/Model.proto
    node ./tools/update_pbjs.js array ./src/coreml-proto.js floatValue float 2
    [[ -n ${crlf} ]] && unix2dos --quiet --newfile ./src/coreml-proto.js ./src/coreml-proto.js
    popd > /dev/null
}

convert() {
    bold "coreml convert"
    venv
    pushd ${root} > /dev/null
    ${PYTHON} -m pip install --quiet --upgrade six numpy protobuf
    ${PYTHON} -m pip install --quiet ./third_party/coremltools
    ${PYTHON} -m pip install --quiet onnx
    ${PYTHON} -m pip install --quiet sklearn
    ${PYTHON} ./tools/coreml-script.py convert ${1}
    deactivate
    popd > /dev/null
}

while [ "$#" != 0 ]; do
    command="$1" && shift
    case "${command}" in
        "clean") clean;;
        "sync") sync;;
        "install") install;;
        "schema") schema;;
        "convert") convert ${1} && shift;;
    esac
done
